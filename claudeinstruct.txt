# PartSelect AI Chat Agent - Simplified Development Plan
## Focused Implementation for Instalily Requirements

### Time Allocation Overview (6 Hours Total)
- **Phase 1 (45 min)**: Basic project setup
- **Phase 2 (2 hours)**: Core agent with DeepSeek integration
- **Phase 3 (1.5 hours)**: Simple API and frontend
- **Phase 4 (1.5 hours)**: Testing and deployment
- **Buffer Time (30 min)**: Final refinements

---

## Phase 1: Simple Project Setup (45 minutes)
*Git Branch: `setup/basic-structure`*

### Step 1.1: Basic Repository Structure (20 minutes)
**Commit: "Basic project structure with essential dependencies"**

**Backend Setup:**
- Create `partselect-chat-backend` directory  
- Initialize Node.js project with TypeScript
- Install core dependencies: Express, TypeScript, CORS, dotenv
- Install AI dependency: OpenAI SDK (for DeepSeek API compatibility)
- Install validation: Zod for type safety
- Create simple folder structure:
  - `src/agents/` - Simple ReAct agent
  - `src/tools/` - Core PartSelect tools
  - `src/services/` - DeepSeek service
  - `src/routes/` - Basic API routes
  - `src/data/` - Sample product data

**Frontend Setup:**
- Use existing React app structure
- Install minimal dependencies: React, Tailwind CSS, Lucide icons
- Set up PartSelect branding colors

### Step 1.2: Environment Setup (15 minutes)
**Commit: "Environment configuration"**

- Create `.env.example` files
- Set up environment variables:
  - DeepSeek API credentials (required)
  - CORS origins
- Basic `.gitignore` configuration

### Step 1.3: Sample Data Setup (10 minutes)
**Commit: "Sample product data for testing"**

- Create sample product data including:
  - PS11752778 (Ice Maker Assembly)
  - Compatible with WDT780SAEM1 model
  - Other refrigerator/dishwasher parts for testing
- Simple JSON structure (no database needed initially)

---

## Phase 2: Core Agent Development (2 hours)
*Git Branch: `backend/agent-implementation`*

### Step 2.1: DeepSeek Integration (Required) (45 minutes)
**Commit: "DeepSeek API integration with error handling"**

**DeepSeek Service (`src/services/DeepSeekService.ts`):**
- **Required DeepSeek API Integration** as specified by Instalily
- Basic chat completions with proper authentication
- PartSelect-specific system prompts for appliance focus
- Simple error handling with fallback responses
- Support for the three required test queries

**Error Handling:**
- API failures with graceful fallbacks
- Clear error messages for missing API keys
- Basic retry logic for network issues

### Step 2.2: Simple ReAct Agent (45 minutes)
**Commit: "Basic ReAct agent for PartSelect queries"**

**PartSelect Agent (`src/agents/PartSelectAgent.ts`):**
- Simple thought-action-observation loop
- Integration with DeepSeek for reasoning
- Tool selection for the 3 required queries
- Focused on refrigerator and dishwasher parts only

### Step 2.3: Essential Tools (30 minutes)
**Commit: "Core PartSelect tools implementation"**

**Three Essential Tools:**
- **ProductSearchTool**: Simple keyword/part number search
- **CompatibilityTool**: Check part-model compatibility  
- **InstallationTool**: Basic step-by-step instructions

Each tool focused on handling the specific Instalily test cases.

---

## Phase 3: Simple Data & Retrieval (30 minutes)
*Git Branch: `backend/simple-search`*

### Step 3.1: Basic Search Implementation (30 minutes)
**Commit: "Simple but effective product search"**

**Simple Search Service:**
- Keyword matching in product names and part numbers
- Model compatibility checking
- Symptom-based search for troubleshooting
- No vector embeddings - just effective string matching
- Optimized for the 3 required test queries

## Phase 4: Simple API & Frontend (1.5 hours)
*Git Branch: `frontend/basic-chat-ui`*

### Step 4.1: Basic API Implementation (30 minutes)
**Commit: "Simple chat API with DeepSeek integration"**

**Single Chat Endpoint:**
- POST `/api/chat` - Handle all chat messages
- Basic CORS and error handling
- DeepSeek integration for the 3 test queries
- Simple JSON request/response format

**Middleware:**
- Basic error handling
- CORS for frontend access
- Request logging

### Step 4.2: Simple React Frontend (60 minutes)
**Commit: "Basic chat interface with PartSelect branding"**

**Core Components:**
- `ChatInterface.tsx` - Main chat container
- `MessageList.tsx` - Display messages
- `MessageInput.tsx` - Text input with send button
- `Message.tsx` - Individual message component

**PartSelect Styling:**
- Simple blue and white color scheme
- PartSelect logo and branding
- Mobile-responsive design
- Clean, professional appearance

**Basic Features:**
- Send message to API
- Display responses
- Loading states
- Error handling

---

## Phase 5: Testing & Deployment (1.5 hours)
*Git Branch: `testing/validation`*

### Step 5.1: Core Functionality Testing (45 minutes)
**Commit: "Validate required Instalily test cases"**

**Required Test Cases:**
- ✅ "How can I install part number PS11752778?"
- ✅ "Is this part compatible with my WDT780SAEM1 model?"  
- ✅ "The ice maker on my Whirlpool fridge is not working. How can I fix it?"

**Validation:**
- Verify DeepSeek API integration works
- Test agent reasoning and tool selection
- Confirm proper responses for each test case
- Check error handling for edge cases

### Step 5.2: Simple Deployment (45 minutes)
**Commit: "Production deployment ready"**

**Backend Deployment:**
- Deploy to Vercel/Netlify Functions
- Configure environment variables
- Set up CORS for production

**Frontend Deployment:**
- Build and deploy React app
- Configure API endpoints
- Test production environment

**Final Validation:**
- Test all 3 required queries in production
- Verify mobile responsiveness
- Check error handling works

---

## Success Criteria & Instalily Validation

### ✅ **Core Requirements Met:**
- **DeepSeek Integration**: Required LLM successfully integrated
- **Refrigerator & Dishwasher Focus**: Agent stays within scope
- **PartSelect Branding**: Professional e-commerce appearance
- **Mobile Responsive**: Works on all device sizes
- **Extensible Architecture**: Clean code ready for future enhancements

### ✅ **Required Test Cases Validated:**
1. **"How can I install part number PS11752778?"** → Detailed installation guide
2. **"Is this part compatible with my WDT780SAEM1 model?"** → Clear compatibility answer
3. **"The ice maker on my Whirlpool fridge is not working. How can I fix it?"** → Troubleshooting + parts

### ✅ **Business Value Delivered:**
- **Customer Self-Service**: Reduces support tickets
- **Sales Enhancement**: Shows parts with pricing/availability  
- **Expert Positioning**: Demonstrates PartSelect's appliance expertise
- **Professional Quality**: Ready for customer-facing deployment

---

## Key Simplifications Made

### **Removed Over-Engineering:**
- ❌ Vector embeddings and hybrid retrieval systems
- ❌ Advanced A/B testing and performance monitoring  
- ❌ Complex state management (Valtio, optimistic updates)
- ❌ Advanced middleware (OpenAPI generation, correlation IDs)
- ❌ Real-time features (typing indicators, presence management)

### **Kept Essential Features:**
- ✅ DeepSeek API integration (required)
- ✅ Simple ReAct agent architecture
- ✅ Core PartSelect tools (search, compatibility, installation)
- ✅ Clean, branded user interface
- ✅ Mobile-responsive design
- ✅ Proper error handling

### **Total Development Time:**
- **Original Plan**: 48+ hours with advanced features
- **Simplified Plan**: 6 hours focused on requirements
- **Time Saved**: 42+ hours while delivering the same business value

This focused approach delivers exactly what Instalily requested: a functional, professional chat agent for PartSelect that demonstrates technical competency while solving real customer problems efficiently.

---

## Success Metrics & PartSelect Demo Validation

### Core PartSelect Features Working:
- ✅ **Product Discovery**: Users can ask "I need a water filter" and get relevant results
- ✅ **Compatibility Checking**: Clear yes/no answers for part/model combinations
- ✅ **Installation Guidance**: Step-by-step instructions with tool requirements
- ✅ **Troubleshooting Support**: Symptom-based part recommendations
- ✅ **PartSelect Integration**: Product cards with pricing, images, part numbers
- ✅ **Mobile Experience**: Works well on phones for on-the-go repairs

### Required Query Validation:
- ✅ **"How can I install part number PS11752778?"** → Shows installation steps
- ✅ **"Is this part compatible with my WDT780SAEM1 model?"** → Clear compatibility answer  
- ✅ **"The ice maker on my Whirlpool fridge is not working"** → Troubleshooting + part suggestions
- ✅ **Off-topic queries** → Polite redirection to PartSelect specialization
- ✅ **Natural language queries** → Understanding "my dishwasher won't drain" type questions

### User Experience Goals:
- ✅ **Professional Appearance**: Matches PartSelect branding and feels integrated
- ✅ **Fast Responses**: Chat responses within 5-10 seconds
- ✅ **Clear Information**: Product details, pricing, availability clearly displayed
- ✅ **Easy Actions**: One-click to view products on PartSelect.com or add to cart
- ✅ **Error Recovery**: Graceful handling when parts not found or API issues
- ✅ **Mobile Friendly**: Responsive design works on all device sizes

### Business Value Demonstration:
- ✅ **Customer Self-Service**: Reduces support ticket volume for common questions
- ✅ **Sales Enhancement**: Shows related parts and installation services
- ✅ **Expert Positioning**: Demonstrates PartSelect's appliance repair expertise
- ✅ **Conversion Support**: Helps customers find the right parts quickly

---

## Git Workflow Summary

### Branch Strategy:
1. `main` - Production ready code
2. `develop` - Integration branch
3. `setup/*` - Initial setup work
4. `backend/*` - Backend development
5. `frontend/*` - Frontend development
6. `testing/*` - Testing implementation
7. `deployment/*` - Production deployment

### Commit Frequency:
- Minimum 12-15 commits over 2 days
- Each major feature as separate commit
- Working state at each commit for easy rollback
- Clear commit messages with scope and description

### Final Repository Structure:
```
partselect-chat/
├── backend/
│   ├── src/
│   │   ├── agents/
│   │   ├── tools/
│   │   ├── services/
│   │   ├── routes/
│   │   └── utils/
│   ├── prisma/
│   └── data/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── store/
│   │   ├── services/
│   │   └── types/
│   └── public/
└── docs/
    └── api/
```

## Key Improvements from Original Proposal

### **Enhanced Backend Architecture (Retained)**
- **ReAct Agent System**: Keeps the advanced reasoning + acting approach for better AI responses
- **Hybrid Retrieval**: Dense + sparse search for more accurate product finding  
- **Modern Tech Stack**: Fastify, Drizzle ORM, and Vercel AI SDK for better performance

### **Simplified Frontend (Revised for 48-Hour Reality)**
- **Removed**: Voice input, file uploads, advanced animations, complex state management
- **Focused On**: Clean PartSelect branding, core text-based chat, mobile responsiveness
- **Practical Features**: Product cards, compatibility checking, installation guides

### **PartSelect-Specific Features (New Focus)**
- **Product Discovery**: Natural language search for appliance parts
- **Compatibility Tools**: Clear yes/no answers for part/model combinations  
- **Installation Support**: Step-by-step guides with tool requirements
- **Troubleshooting**: Symptom-based diagnosis and part recommendations
- **Business Integration**: Direct links to PartSelect checkout and product pages

### **Realistic Implementation Timeline**
- **Day 1**: Advanced backend with solid ALM architecture
- **Day 2**: Clean, functional frontend focused on user value
- **Testing**: Manual validation of core user journeys
- **Deployment**: Simple demo deployment for immediate evaluation

This refined blueprint balances cutting-edge AI capabilities with practical 48-hour delivery, ensuring a professional PartSelect-branded chat agent that delivers real business value through the core features customers actually need.