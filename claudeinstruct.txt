# PartSelect AI Chat Agent - Enhanced Development Blueprint
## 48-Hour Development Plan with Advanced ALM Architecture

### Revised Time Allocation Overview (48 Hours Total)
- **Day 1 (8 hours)**: ReAct agent backend, hybrid retrieval, core PartSelect tools and API
- **Day 2 (6.25 hours)**: PartSelect-branded frontend, essential integrations, testing and demo deployment
- **Buffer Time (1.75 hours)**: Debugging, refinements, and demo preparation

---

## Phase 1: Project Setup & Modern Architecture Planning (2 hours)
*Git Branch: `setup/enhanced-alm-structure`*

### Step 1.1: Repository Structure & Advanced Dependencies (45 minutes)
**Commit: "Enhanced ALM-based project structure with modern stack"**

**Backend Setup (Modern Node.js + TypeScript):**
- Create `partselect-chat-backend` directory
- Initialize Node.js project with TypeScript 5.0+
- Install modern core dependencies: Fastify (high-performance), TypeScript, Drizzle ORM, Socket.io, CORS, dotenv
- Install ALM/AI dependencies: Vercel AI SDK, Pinecone SDK, Cohere SDK (for rerank), Qdrant (vector alternative)
- Install validation: Zod for runtime type safety
- Set up strict TypeScript configuration with latest features
- Create enhanced folder structure:
  - `src/agents/` - ReAct agent architecture with reasoning traces
  - `src/tools/` - Self-supervised tool learning system (Toolformer-inspired)
  - `src/retrieval/` - Hybrid dense+sparse retrieval system
  - `src/services/` - Modern service layer with dependency injection
  - `src/routes/` - Fastify route handlers with validation
  - `src/types/` - Comprehensive TypeScript schemas with Zod
  - `src/utils/` - Utility functions with proper error handling
  - `drizzle/` - Modern database schema with migrations
  - `data/` - Enhanced product data processing pipeline

**Frontend Setup (Next.js + Modern React):**
- Create Next.js 14 application with App Router
- Install modern UI dependencies: shadcn/ui, Tailwind CSS, Lucide React, React Markdown
- Install state management: Valtio for reactive state management
- Install real-time: Socket.io client with React hooks
- Install forms: React Hook Form with Zod validation
- Set up Tailwind configuration with PartSelect brand system and design tokens

### Step 1.2: Environment Configuration (30 minutes)
**Commit: "Environment configuration and secrets management"**

- Create `.env.example` files for both frontend and backend
- Set up environment variables for:
  - DeepSeek API credentials
  - Pinecone vector database connection
  - PostgreSQL database URL
  - CORS origins and allowed domains
- Configure different environments (development, staging, production)
- Set up `.gitignore` files to exclude sensitive data

### Step 1.3: Database Schema Design (60 minutes)
**Commit: "Initial Prisma schema and database models"**

**Design Prisma Schema (`prisma/schema.prisma`):**
- **Chat Sessions**: Track user conversations with unique identifiers
- **Messages**: Store chat history with metadata for rich responses
- **Products**: Core product information (part numbers, names, descriptions)
- **Compatibility**: Model-to-part relationship mapping
- **Installation Guides**: Step-by-step instructions linked to parts
- **User Interactions**: Analytics data for improving responses

**Key Relationships:**
- One-to-many between sessions and messages
- Many-to-many between products and compatible models
- One-to-one between products and installation guides

---

## Phase 2: Backend Core Development (4 hours)
*Git Branch: `backend/core-agent-system`*

### Step 2.1: ReAct Agent Architecture Foundation (120 minutes)
**Commit: "ReAct agent architecture with reasoning traces and tool integration"**

**Create ReActAgent (`src/agents/ReActAgent.ts`):**
- Implement ReAct (Reasoning + Acting) architecture from ALM research
- Design alternating thought-action-observation loops
- Build reasoning trace system for explainable AI responses  
- Implement dynamic tool selection based on context and reasoning
- Create self-reflection mechanism for error correction
- Build conversation memory with episodic and semantic storage

**Enhanced Tool System (`src/agents/ToolRegistry.ts`):**
- Implement Toolformer-inspired self-supervised tool learning
- Create tool effectiveness scoring and adaptive selection
- Design modular tool interface with composable capabilities
- Build tool result caching and optimization layer
- Implement tool chaining with dependency resolution
- Add tool usage analytics and improvement feedback loops

### Step 2.2: DeepSeek Integration Service (Required) (75 minutes)
**Commit: "DeepSeek LLM integration with comprehensive error handling"**

**DeepSeek Service (`src/services/DeepSeekService.ts`) - Primary Integration:**
- **Required DeepSeek API Integration** as specified by Instalily
- Implement DeepSeek chat completions with proper authentication
- Design streaming responses for real-time chat experience
- Create PartSelect-specific system prompts for appliance focus
- Build conversation context management within token limits
- Add function calling for seamless tool integration with DeepSeek
- Implement retry logic with exponential backoff for API failures

**Comprehensive Error Handling for DeepSeek:**
- **API Rate Limiting**: Handle 429 errors with intelligent backoff
- **Token Limit Exceeded**: Auto-truncate context while preserving key information
- **Network Timeouts**: Retry with fallback messages to user
- **Invalid API Keys**: Clear error messages for configuration issues
- **Service Unavailable**: Graceful degradation with cached responses when possible
- **Malformed Responses**: Parse and sanitize DeepSeek outputs safely

**PartSelect-Focused Prompt Engineering:**
- System prompt restricting responses to refrigerator and dishwasher parts only
- Few-shot examples for the three required Instalily test queries
- Out-of-scope query detection and polite redirection
- Tool usage instructions for product search, compatibility, and installation
- Error recovery prompts when tools fail or return no results

### Step 2.3: Specialized Tools Development (90 minutes)
**Commit: "Core business logic tools implementation"**

**Product Search Tool (`src/tools/ProductSearchTool.ts`):**
- Semantic search using vector embeddings
- Filter capabilities by category, price range, brand
- Relevance scoring and result ranking
- Integration with inventory status

**Compatibility Checker (`src/tools/CompatibilityTool.ts`):**
- Model number parsing and standardization
- Cross-reference database queries for compatibility
- Confidence scoring for compatibility matches
- Alternative part suggestions for incompatible requests

**Installation Guide Tool (`src/tools/InstallationTool.ts`):**
- Retrieve step-by-step instructions by part number
- Format instructions for chat display with images/diagrams
- Difficulty assessment and tool requirements
- Safety warnings integration

**Troubleshooting Tool (`src/tools/TroubleshootingTool.ts`):**
- Diagnostic question generation based on symptoms
- Decision tree navigation for common issues
- Part replacement recommendations
- Integration with installation guides

---

## Phase 3: Advanced Data Layer & Hybrid Retrieval (2.5 hours)
*Git Branch: `backend/hybrid-retrieval-system`*

### Step 3.1: Enhanced Product Data Processing (75 minutes)
**Commit: "Advanced data pipeline with validation and enrichment"**

**Data Processing Pipeline (`src/services/DataProcessingService.ts`):**
- Streaming CSV/JSON parsing for large datasets with progress tracking
- Advanced data validation using Zod schemas with error recovery
- Automated data enrichment using LLM-generated descriptions
- Multi-source data reconciliation and deduplication
- Real-time data quality monitoring and alerts
- Incremental processing for data updates and changes

**Enhanced Data Structure:**
- Rich product metadata with hierarchical categories
- Semantic relationships between compatible parts
- Installation difficulty scoring and time estimates
- Customer review sentiment analysis integration
- Dynamic pricing and availability tracking

### Step 3.2: Hybrid Vector + Sparse Retrieval System (75 minutes)
**Commit: "Hybrid dense+sparse retrieval with reranking"**

**Advanced Retrieval Service (`src/retrieval/HybridRetrieval.ts`):**
- Implement hybrid dense (vector) + sparse (BM25) search as per ALM research
- Multi-stage retrieval with initial recall and precision reranking
- Dynamic query expansion using semantic similarity
- Context-aware result filtering and personalization
- A/B testing framework for retrieval method optimization
- Real-time performance monitoring and adaptive optimization

**Modern Embedding Strategy:**
- Multi-model embedding approach (text + image descriptions)
- Fine-tuned embeddings for PartSelect domain knowledge
- Temporal embeddings for seasonal product relevance
- Query-specific embedding selection and optimization
- Embedding drift detection and model updates

---

## Phase 4: Modern API Layer & Advanced Real-time Features (2 hours)
*Git Branch: `backend/advanced-api-layer`*

### Step 4.1: Fastify API Development with Streaming (75 minutes)
**Commit: "High-performance API with streaming and validation"**

**Enhanced Chat API Endpoints (`src/routes/chatRoutes.ts`):**
- POST `/api/chat/stream` - Streaming chat responses with SSE
- POST `/api/chat/message` - Traditional request-response for fallback
- GET `/api/chat/history/:sessionId` - Paginated conversation history
- POST `/api/chat/session` - Enhanced session with user preferences
- PATCH `/api/chat/session/:sessionId` - Update session configuration
- DELETE `/api/chat/session/:sessionId` - Session cleanup with analytics

**Advanced Product API (`src/routes/productRoutes.ts`):**
- GET `/api/products/search` - Hybrid search with faceted filtering
- GET `/api/products/suggest` - Auto-complete and query suggestions  
- GET `/api/products/:partNumber` - Rich product details with recommendations
- POST `/api/products/compatibility` - Batch compatibility checking
- GET `/api/products/:partNumber/installation` - Interactive installation guides
- GET `/api/analytics/search` - Search analytics and optimization insights

**Modern Middleware Stack:**
- Zod validation with automatic OpenAPI generation
- Advanced rate limiting with user-based quotas
- CORS with dynamic origin validation
- Structured error handling with proper HTTP status codes
- Comprehensive request/response logging with correlation IDs
- Performance monitoring with metrics collection

### Step 4.2: Real-time Chat Implementation (60 minutes)
**Commit: "Socket.io integration for real-time messaging"**

**Socket Service (`src/services/SocketService.ts`):**
- Real-time message broadcasting
- Typing indicators and presence management
- Session management and cleanup
- Error handling and reconnection logic
- Message queuing for offline scenarios

**Event Handling:**
- `message:send` - Handle incoming user messages
- `message:receive` - Broadcast agent responses
- `typing:start/stop` - Typing indicator management
- `session:join/leave` - Session management
- `connection:error` - Error handling and recovery

---

## Day 1 Completion Commit
**Final Commit: "Day 1: Complete backend infrastructure with agent system"**

---

## Phase 5: Modern Frontend Foundation (3.5 hours)
*Git Branch: `frontend/nextjs-advanced-interface`*

### Step 5.1: Advanced State Management Setup (60 minutes)
**Commit: "Valtio reactive state with comprehensive TypeScript schemas"**

**Reactive Chat Store (`src/store/chatStore.ts`) with Valtio:**
- Reactive message state with automatic UI updates
- Optimistic updates with automatic rollback on failures
- Advanced session management with user preferences
- Real-time synchronization with conflict resolution
- Message threading and conversation branching support
- Rich metadata handling for reasoning traces and tool results

**Enhanced UI Store (`src/store/uiStore.ts`):**
- Advanced theme system with design tokens
- Responsive breakpoint management with SSR support
- Modal and overlay management with focus trapping
- User preference synchronization across devices
- Accessibility state management and ARIA support

**Comprehensive TypeScript Schemas (`src/types/`) with Zod:**
- Runtime-validated message and product schemas
- API response types with automatic validation
- Component prop interfaces with strict typing
- ReAct reasoning trace types for explainable AI
- Tool result schemas with rich metadata support

### Step 5.2: Core UI Components - PartSelect Focused (75 minutes)
**Commit: "Essential chat components with PartSelect branding"**

**Essential Layout Components:**
- `ChatInterface.tsx` - Clean chat container matching PartSelect's design system
- `ChatHeader.tsx` - PartSelect branded header with clear navigation
- `MessageList.tsx` - Simple scrollable message container
- `MessageInput.tsx` - Text-only input with send button and Enter key support

**PartSelect-Specific Message Components:**
- `Message.tsx` - User/AI message display with PartSelect styling
- `TypingIndicator.tsx` - Simple "AI is thinking..." indicator
- `ProductCard.tsx` - PartSelect product display with image, price, part number
- `CompatibilityResult.tsx` - Clear yes/no compatibility display
- `InstallationSteps.tsx` - Simple numbered steps with basic formatting

**PartSelect Branding & Styling:**
- PartSelect color palette (blues, grays, whites)
- Typography matching PartSelect website
- Responsive design for mobile and desktop
- Clean, professional e-commerce aesthetic
- Consistent button and form styling

### Step 5.3: PartSelect Core Features Definition (30 minutes)
**Commit: "Define essential chat agent capabilities for PartSelect users"**

## **Core PartSelect Chat Agent Features:**

### **1. Product Discovery & Search**
- **Natural Language Search**: "I need a water filter for my Whirlpool refrigerator"
- **Visual Product Cards**: Show part image, name, part number, price, availability
- **Related Parts**: Suggest complementary parts customers often buy together
- **Filter Guidance**: Help users narrow down by brand, model, price range

### **2. Compatibility Verification**
- **Model Number Lookup**: "Will part PS11752778 work with my WDT780SAEM1?"
- **Clear Yes/No Answers**: Simple compatibility status with confidence level
- **Alternative Suggestions**: If incompatible, show correct parts for their model
- **Multiple Model Support**: Check compatibility across multiple appliances

### **3. Installation Guidance**
- **Step-by-Step Instructions**: Numbered installation steps with clear descriptions
- **Tool Requirements**: List required tools and materials upfront
- **Difficulty Assessment**: Easy/Medium/Hard with time estimates
- **Safety Warnings**: Highlight electrical/water shutoff requirements

### **4. Troubleshooting Support**
- **Symptom-Based Diagnosis**: "My ice maker stopped working"
- **Part Recommendations**: Suggest most likely failing components
- **Diagnostic Questions**: Guide users through simple troubleshooting
- **Repair vs Replace**: Help decide between fixing or replacing

### **5. Order & Customer Support**
- **Order Status**: "Where is my order #12345?"
- **Return Guidance**: Help with return process and part compatibility
- **Warranty Information**: Provide warranty details and claim process
- **Shipping Options**: Explain delivery timeframes and costs

### **6. Expert Recommendations**
- **Professional Installation**: When to recommend hiring a technician
- **Maintenance Tips**: Proactive maintenance to prevent future issues
- **Seasonal Reminders**: Filter changes, coil cleaning schedules

---

## Phase 6: Simplified Frontend Integration (2 hours)
*Git Branch: `frontend/core-integration`*

### Step 6.1: Basic API Integration (60 minutes)
**Commit: "Core API client with PartSelect functionality"**

**Robust API Client (`src/services/apiClient.ts`):**
- Comprehensive fetch wrapper with retry logic and timeout handling
- DeepSeek API integration with proper authentication and error handling
- Product search with fallback when external APIs fail
- Compatibility checking with graceful degradation
- Loading states with timeout protection and user feedback
- Network error recovery with offline message display
- Input sanitization and validation before API calls

**React Hooks for PartSelect Features:**
- `useChat()` - Send messages, display responses, typing indicators
- `useProductSearch()` - Search products, display results
- `useCompatibility()` - Check part compatibility with models
- `useInstallation()` - Fetch and display installation guides

### Step 6.2: Essential User Experience (60 minutes)  
**Commit: "Core UX features for PartSelect customers"**

**Essential Interactive Features:**
- **Quick Actions**: Pre-built buttons for common queries ("Check compatibility", "How to install")
- **Part Number Recognition**: Auto-detect part numbers in messages and make them clickable
- **Product Quick View**: Click product cards to see larger images and full details
- **Copy Part Numbers**: Easy copy-to-clipboard for part numbers and model numbers
- **Session Persistence**: Remember conversation when user returns

**Essential Performance & Error Handling:**
- Loading spinners with timeout protection (show error after 30 seconds)
- Comprehensive error messages with specific retry actions
- Network status detection with offline mode messaging
- Mobile-responsive layout tested on actual devices
- Graceful degradation when features fail (e.g., show text when images don't load)
- Input validation to prevent malicious or malformed queries
- Rate limiting protection with user-friendly messaging

**PartSelect-Specific UX:**
- **"Add to Cart" buttons** on product cards (links to PartSelect checkout)
- **"View on PartSelect.com"** links for full product pages  
- **Related parts suggestions** after showing a product
- **Clear pricing and availability** messaging
- **Professional installation finder** when complexity is high

---

## Phase 7: Essential Testing & Validation (45 minutes)
*Git Branch: `testing/core-validation`*

### Step 7.1: Critical Path Testing (45 minutes)
**Commit: "Essential functionality validation and manual testing"**

**Required Instalily Functionality Testing:**
- **DeepSeek Integration**: Verify DeepSeek API calls work and responses are coherent
- **Scope Restriction**: Ensure agent only responds to refrigerator/dishwasher queries
- **Out-of-Scope Handling**: Test with questions about other appliances and verify polite redirection
- **Error Resilience**: Test API failures, network issues, malformed inputs gracefully

**Mandatory Test Cases (From Instalily Instructions):**
- ✅ **"How can I install part number PS11752778?"** 
  - Must return step-by-step installation instructions
  - Should include tool requirements and safety warnings
  - Test graceful handling if part number not found
- ✅ **"Is this part compatible with my WDT780SAEM1 model?"**
  - Must provide clear yes/no compatibility answer
  - Should suggest alternative parts if incompatible
  - Test with invalid model numbers
- ✅ **"The ice maker on my Whirlpool fridge is not working. How can I fix it?"**
  - Must provide troubleshooting steps
  - Should recommend specific parts for common failures
  - Test graceful handling of vague symptoms

**Error Handling Validation:**
- **DeepSeek API Failures**: Verify graceful fallback and user messaging
- **Database Connection Issues**: Test offline mode and error recovery
- **Invalid Product Queries**: Handle non-existent parts professionally
- **Malformed User Input**: Sanitize inputs and provide helpful guidance
- **Rate Limiting**: Verify proper handling when API limits exceeded

**Quick Performance Check:**
- Page load times under 3 seconds
- Chat responses within reasonable time (5-10 seconds)
- Images load properly and fallback to placeholders if needed
- Basic accessibility (tab navigation, screen reader friendly)

---

## Phase 8: Simple Deployment & Demo (30 minutes)
*Git Branch: `deployment/demo`*

### Step 8.1: Quick Demo Deployment (30 minutes)
**Final Commit: "Demo deployment for PartSelect chat agent"**

**Backend Deployment (Vercel/Netlify Functions):**
- Deploy backend as serverless functions for quick setup
- Configure environment variables for DeepSeek API
- Set up simple database (Supabase free tier or JSON files)
- Basic CORS configuration for frontend

**Frontend Deployment (Vercel/Netlify):**
- Build and deploy React app
- Configure API endpoints to point to deployed backend
- Set up custom domain or use provided subdomain
- Basic error monitoring and logging

**Demo Preparation:**
- Create sample product data for refrigerator and dishwasher parts
- Test the three required example queries
- Prepare demo script showing key features:
  - Product search and compatibility checking
  - Installation guidance
  - PartSelect branding and user experience
- Document any limitations or areas for future enhancement

---

## Success Metrics & PartSelect Demo Validation

### Core PartSelect Features Working:
- ✅ **Product Discovery**: Users can ask "I need a water filter" and get relevant results
- ✅ **Compatibility Checking**: Clear yes/no answers for part/model combinations
- ✅ **Installation Guidance**: Step-by-step instructions with tool requirements
- ✅ **Troubleshooting Support**: Symptom-based part recommendations
- ✅ **PartSelect Integration**: Product cards with pricing, images, part numbers
- ✅ **Mobile Experience**: Works well on phones for on-the-go repairs

### Required Query Validation:
- ✅ **"How can I install part number PS11752778?"** → Shows installation steps
- ✅ **"Is this part compatible with my WDT780SAEM1 model?"** → Clear compatibility answer  
- ✅ **"The ice maker on my Whirlpool fridge is not working"** → Troubleshooting + part suggestions
- ✅ **Off-topic queries** → Polite redirection to PartSelect specialization
- ✅ **Natural language queries** → Understanding "my dishwasher won't drain" type questions

### User Experience Goals:
- ✅ **Professional Appearance**: Matches PartSelect branding and feels integrated
- ✅ **Fast Responses**: Chat responses within 5-10 seconds
- ✅ **Clear Information**: Product details, pricing, availability clearly displayed
- ✅ **Easy Actions**: One-click to view products on PartSelect.com or add to cart
- ✅ **Error Recovery**: Graceful handling when parts not found or API issues
- ✅ **Mobile Friendly**: Responsive design works on all device sizes

### Business Value Demonstration:
- ✅ **Customer Self-Service**: Reduces support ticket volume for common questions
- ✅ **Sales Enhancement**: Shows related parts and installation services
- ✅ **Expert Positioning**: Demonstrates PartSelect's appliance repair expertise
- ✅ **Conversion Support**: Helps customers find the right parts quickly

---

## Git Workflow Summary

### Branch Strategy:
1. `main` - Production ready code
2. `develop` - Integration branch
3. `setup/*` - Initial setup work
4. `backend/*` - Backend development
5. `frontend/*` - Frontend development
6. `testing/*` - Testing implementation
7. `deployment/*` - Production deployment

### Commit Frequency:
- Minimum 12-15 commits over 2 days
- Each major feature as separate commit
- Working state at each commit for easy rollback
- Clear commit messages with scope and description

### Final Repository Structure:
```
partselect-chat/
├── backend/
│   ├── src/
│   │   ├── agents/
│   │   ├── tools/
│   │   ├── services/
│   │   ├── routes/
│   │   └── utils/
│   ├── prisma/
│   └── data/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── store/
│   │   ├── services/
│   │   └── types/
│   └── public/
└── docs/
    └── api/
```

## Key Improvements from Original Proposal

### **Enhanced Backend Architecture (Retained)**
- **ReAct Agent System**: Keeps the advanced reasoning + acting approach for better AI responses
- **Hybrid Retrieval**: Dense + sparse search for more accurate product finding  
- **Modern Tech Stack**: Fastify, Drizzle ORM, and Vercel AI SDK for better performance

### **Simplified Frontend (Revised for 48-Hour Reality)**
- **Removed**: Voice input, file uploads, advanced animations, complex state management
- **Focused On**: Clean PartSelect branding, core text-based chat, mobile responsiveness
- **Practical Features**: Product cards, compatibility checking, installation guides

### **PartSelect-Specific Features (New Focus)**
- **Product Discovery**: Natural language search for appliance parts
- **Compatibility Tools**: Clear yes/no answers for part/model combinations  
- **Installation Support**: Step-by-step guides with tool requirements
- **Troubleshooting**: Symptom-based diagnosis and part recommendations
- **Business Integration**: Direct links to PartSelect checkout and product pages

### **Realistic Implementation Timeline**
- **Day 1**: Advanced backend with solid ALM architecture
- **Day 2**: Clean, functional frontend focused on user value
- **Testing**: Manual validation of core user journeys
- **Deployment**: Simple demo deployment for immediate evaluation

This refined blueprint balances cutting-edge AI capabilities with practical 48-hour delivery, ensuring a professional PartSelect-branded chat agent that delivers real business value through the core features customers actually need.